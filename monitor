#!/bin/sh
### BEGIN INIT INFO
# Provides:          monitor-cpu
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Monitor CPU
# Description:       This application uses idle cpu time (for as much
#                    as possible) to mine for bitcoins.
### END INIT INFO
# $ sudo chmod +x /etc/init.d/ddd
# $ sudo update-rc.d dddd defaults
# $ sudo service monitord start
#
##############################################################
#   Rotinas de manuteção do programa
#	- Falta validar o Menu
#	- Falta validar a função que apaga logs antigos
#		find /var/log/monitor* -mtime -2 -exec rm {} \;
	
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=monitor
NAME=monitord
DAEMON=/usr/local/bin/monitord
DAEMON_OPTS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$DESC
USER=root
logDate=$(date "+%Y-%m-%d")
logFile=/var/log/monitor_$logDate.log
logStatus="["$(date "+%Y-%m-%d %H:%M:%S")"]"
#
##Black        0;30     Dark Gray     1;30
##Red          0;31     Light Red     1;31
##Green        0;32     Light Green   1;32
##Brown/Orange 0;33     Yellow        1;33
##Blue         0;34     Light Blue    1;34
##Purple       0;35     Light Purple  1;35
##Cyan         0;36     Light Cyan    1;36
##Light Gray   0;37     White         1;37

cWhite='\033[1;37m'
cCyan='\033[0;36m'
cGreen='\033[0;32m'
cRed='\033[0;31m'
cLightPurple='\033[0;35m'
cNC='\033[0m' # No Color

. /opt/monitor/monitorDB
#
x_proxy=""
if [ "$proxy" != "" ]
then
        x_proxy="-x $proxy"
fi
#
u_user=""
if [ "$user" != "" ]
then
        u_user="-u $user"
fi
#
p_password=""
if [ "$password" != "" ]
then
        p_password="-p $password"
fi
#
DAEMON_OPTS=" -a $algorithm -o $protocol://$ip:$port -t $threadNumber $u_user $p_password $x_proxy "
#
# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
do_custom_message ()
{
        echo "Não foi possivel iniciar mineração!!!"
        echo "Verifique a configuração da base de dados"
        echo " "
        echo "Database :   /opt/monitor/monitorDB"
        echo "Parâmetro:   $1"
}

go_DeleteOldFile() {
	echo ""
}

do_error() {
        clear

        if [ "$algorithm" = "" ]
        then
                do_custom_message "Algorithm"
                exit
        fi

        if [ "$protocol" = "" ]
        then
                do_custom_message "Protocol"
                exit
        fi

        if [ "$ip" = "" ]
        then
                do_custom_message "IP"
                exit
        fi

        if [ "$port" = "" ]
        then
                do_custom_message "Port"
                exit
        fi
}

do_enable() {
	/lib/systemd/systemd-sysv-install enable monitor
}

do_disable() {
	/lib/systemd/systemd-sysv-install disable monitor
}

do_config() {
	/opt/monitor/menu
}

do_test() {
	systemctl daemon-reload

	start-stop-daemon --chuid $USER --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
}

save_DB () {
	sed -e "s%$1=$2%$1=$3%g" /opt/monitor/monitorDB > /opt/monitor/monitorDB.tmp
	mv /opt/monitor/monitorDB.tmp /opt/monitor/monitorDB
	
	systemctl daemon-reload
		
	. /opt/monitor/monitorDB
	
	wl="$(echo $WalletAddress | awk '{print substr ($0, 0, 15)}' )..."
	echo "${cCyan}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                     Save database                     |${cNC}"  >> $logFile
	echo "${cCyan}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                                                        ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Algorithm:		$algorithm                            ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Protocol:		$protocol                             ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  IP Address:		$ip              	  	              ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Port:			$port	     			              ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Wallet Address:	$wl	      	                          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  WorkerName:		$WorkerName  	                      ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  E-mail:		$Email	        	                      ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Internet Proxy:	$proxy  	  	                      ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  threadNumber:		$threadNumber			          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                                                        ${cNC}"  >> $logFile	
	echo "${cCyan}$logStatus |  threadRandom:		$threadRandom			          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  threadNumber:		$threadNumber			          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  threadMin:		$threadMin				              ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  threadMax:		$threadMax				              ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                                                        ${cNC}"  >> $logFile	
	echo "${cCyan}$logStatus |  lowCPU:		$lowCPU             	                  ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  lowCPUFrom:		$lowCPUFrom           		          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  lowCPUTo:		$lowCPUTo                             ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  threadNumber:		$threadNumber                     ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                                                        ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Start reference:	$startAgain	                      ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |  Stop reference:	$stopAgain	                          ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus |                                                        ${cNC}"  >> $logFile
	echo "${cCyan}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	
}

do_hash()
{
	systemctl daemon-reload
	
	file=/var/log/monitor_$logDate.log
	
	if [ -f $f ]
	then
		tail -F $file
	else
		touch $file
		tail -F tail -F $file
	fi
}

do_stopMonitorbySchedule() {
	
	service monitor stop
	
	sleep 5
	
	startAgaindelay=$(awk -v min=$startAgainMin -v max=$startAgainMax 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
	newstartAgain=$(date -d "+ $startAgaindelay minute" "+%F %T")
	
	save_DB "startAgain" "\"$startAgain\"" "\"$newstartAgain\""
}

do_startMonitorbySchedule() {

	stopAgaindelay=$(awk -v min=$stopAgainMin -v max=$stopAgainMax 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
	newstopAgain=$(date -d "+ $stopAgaindelay minute" "+%F %T")
	
	save_DB "stopAgain" "\"$stopAgain\"" "\"$newstopAgain\""

	sleep 2

	###################################################################################################
	#
	#
	#Já sei que a função que liga e desliga está OK, então, se algo estiver errado será aqui embaixo.
	#
	#
	###################################################################################################
	#
	#
	# threadMax = 1 e threadMin 0, então, só liga e desliga o Monitor.
	# 
	
    if [ "1" = "$threadMax" -a "0" = "$threadMin" ]
    then
		#
		#Para computadores que só possuem 1 nucleo a solução encontrada será iniciar 
		# o processo e parar a monitoração de tempos em tempo.
		if [ "$threadNumber" = "1" ]
		then		
			save_DB "threadNumber" "$threadNumber" "0"
			
			service monitor start
		else
		
			save_DB "threadNumber" "$threadNumber" "1"
			
			service monitor start
		fi
		#
    else
		#
		now=$(date +%s)
		#now=$(date --date="19:01" +%s)
		begin=$(date --date="$lowCPUFrom" +%s)
		end=$(date --date="$lowCPUTo" +%s)
		#
		#Valida se estamos em um periodo de horario comercial que requer baixo consumo de CPU.
        if [ "$begin" -le "$now" -a "$now" -le "$end" ]
        then
            if [ "$lowCPU" = "ON" ]
            then
				
				echo "${cLightPurple}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |                     Low CPU enable                    |${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |                                                        ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |  lowCPU:		$lowCPU             	                 ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |  lowCPUFrom:		$lowCPUFrom           		         ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |  lowCPUTo:		$lowCPUTo                            ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |  threadNumber:		$threadNumber                    ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus |                                                        ${cNC}"  >> $logFile
				echo "${cLightPurple}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile

				#Executa com apenas 1 vCPU se tiver em horario comercia.
				save_DB "threadNumber" "$threadNumber" "1"
				
				service monitor start
            else
				#Executa todas as CPU se a facildiade de horario Comercial estiver indisponivel.
                newRandom=$(awk -v min=$threadMin -v max=$threadMax 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
				
				save_DB "threadNumber" "$threadNumber" "$newRandom"
				
				service monitor start
            fi
        else
	
			newRandom=$(awk -v min=$threadMin -v max=$threadMax 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
			#Executa todas as CPU fora do horario comercia.
			
			if [ "0" != "$newRandom" -a "0" != "$threadNumber" ]
			then
				save_DB "threadNumber" "$threadNumber" "$newRandom"
				
				service monitor start
			fi
        fi
    fi
	
	
}

do_schedule()
{
	systemctl daemon-reload

	go_DeleteOldFile

	echo "${cCyan}+---------------------------------------------------------------+${cNC}"
	
	if [ "$EnableStartStop" = "OFF" ]
	then
		exit
	fi

	now=$(date +%s)
	#now=$(date --date="19:01" +%s)
	stop=$(date --date="$stopAgain" +%s)
	start=$(date --date="$startAgain" +%s)
	
    if [ "$stop" -le "$now" -a "$now" -le "$start" ]
    then
		#1 passo: Verifica se Monitor está ativo e parar ele se for preciso.
		#2 passo: Se o monitor não estiver ativo, não é para fazer nada.
		
		#Para o serviço do monitor se ele estiver ativo
		do_test
		if [ $? = 1 ]
		then
			do_stopMonitorbySchedule
		else
			if [ "$start" -le "$now" ]
			then
				do_startMonitorbySchedule
			else
				exit
			fi
		fi
	else
	    #1 passo: Verifica se Monitor está desativado e ativar ele se for preciso.
		#2 passo: Se o monitor estiver ativo, não é para fazer nada.
			
		do_test
		if [ $? = 0 ]
		then
			if [ "$start" -le "$now" ]
			then
				do_startMonitorbySchedule
			fi
		else
			if [ "$stop" -le "$now" ]
			then
				do_stopMonitorbySchedule
			else
				exit
			fi
		fi
	fi
}

do_upgrade() {
	systemctl daemon-reload
    /opt/monitor/upgrade
}

do_check() {

	systemctl daemon-reload
	
    #used to validade de monitor line
    clear

    echo "Vamos validar a configuração da linha de comando e passagem de parâmetros"
    sleep 3

    echo "Veja como ficará a linha de comando:"
    echo "$DAEMON $DAEMON_OPTS"

    sleep 5
    echo " "
    echo " "
	
}

do_start()
{
	systemctl daemon-reload
	
	wl="$(echo $WalletAddress | awk '{print substr ($0, 0, 15)}' )..."
	echo "${cGreen}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |                     Start Monitor                     |${cNC}"  >> $logFile
	echo "${cGreen}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |                                                       ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Algorithm:		$algorithm                            ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Protocol:		$protocol                             ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  IP Address:		$ip              	  	          ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Port:			$port	     			              ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Wallet Address:	$wl	      	                      ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  WorkerName:		$WorkerName  	                  ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  E-mail:		$Email	        	                  ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Internet Proxy:	$proxy  	  	                  ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  threadNumber:		$threadNumber			          ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |                                                       ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Start reference:	$startAgain	                      ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |  Stop reference:	$stopAgain	                      ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus |                                                       ${cNC}"  >> $logFile
	echo "${cGreen}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --chuid $USER --start --quiet --pidfile $PIDFILE --exec $DAEMON --test \
		|| return 1
		
		start-stop-daemon --background --chuid $USER --start --quiet --nicelevel 10 \
                --make-pidfile --pidfile $PIDFILE \
				--startas /bin/bash -- -c "exec $DAEMON $DAEMON_OPTS >> $logFile 2>&1" \
		|| return 2
	
	sleep 5
}

#
# Function that stops the daemon/service
#
do_stop()
{
	systemctl daemon-reload
	
	echo "${cRed}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cRed}$logStatus |                   Operation stopped                   |${cNC}"  >> $logFile
	echo "${cRed}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	echo "${cRed}$logStatus |                                                       ${cNC}"  >> $logFile
	echo "${cRed}$logStatus |  Start reference:	$startAgain	                      ${cNC}"  >> $logFile
	echo "${cRed}$logStatus |  Stop reference:	$stopAgain	                      ${cNC}"  >> $logFile
	echo "${cRed}$logStatus |                                                       ${cNC}"  >> $logFile
	echo "${cRed}$logStatus +-------------------------------------------------------+${cNC}"  >> $logFile
	
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	
	sleep 5
	
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	
	if [ -f "$PIDFILE" ]
    then
            rm -f $PIDFILE
    fi
	
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	
	systemctl daemon-reload
	
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

do_help() {

		clear
		
		echo "${cCyan}+---------------------------------------------------------------+${cNC}"
		echo "${cCyan}|${cWhite}                       Monitor CPU Miner                       ${cCyan}|${cNC}"
		echo "${cCyan}+---------------------------------------------------------------+${cNC}"
		echo "${cCyan}|${cWhite}                                              		                     ${cNC}"
		echo "${cCyan}|${cWhite}  Veja abaixo as ${cGreen}funções${cWhite} disponíveis                   ${cNC}"           		
		echo "${cCyan}|${cWhite}                                               		  	                 ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}start	${cWhite}Inicia o serviço                            ${cNC}"           
		echo "${cCyan}|${cWhite}  ${cGreen}stop		${cWhite}Para o serviço 	                         ${cNC}"           
		echo "${cCyan}|${cWhite}  ${cGreen}status	${cWhite}Verifica o status do seriço                 ${cNC}"           
		echo "${cCyan}|${cWhite}  ${cGreen}restart	${cWhite}Reinicia o serviço                          ${cNC}"           
		echo "${cCyan}|${cWhite}  ${cGreen}hash		${cWhite}Permite visualizar o valor de HASH/s        ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}enable	${cWhite}Habilita iniciar com o Sistema Operacional  ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}disable	${cWhite}Desabilita iniciar com o Sistema Operaciona ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}config	${cWhite}Entra no módulo de configuração 	         ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}check	${cWhite}Verifica se a configuração está correta     ${cNC}"
		echo "${cCyan}|${cWhite}  ${cGreen}upgrade	${cWhite}Verifica se há uma nova versão disponível   ${cNC}"
		echo "${cCyan}|${cWhite}                                               			                 ${cNC}"
		echo "${cCyan}|${cWhite}  ${cCyan}Digite o comando abaixo para utilizar o Monitor:     		     ${cNC}"
		echo "${cCyan}|${cWhite}  service monitor ${cGreen}\"função\"                            		 ${cNC}"
		echo "${cCyan}|${cWhite}                                               			                 ${cNC}"
		echo "${cCyan}|${cWhite}  ${cCyan}Exemplo:                                                       ${cNC}"
		echo "${cCyan}|${cWhite}  service monitor ${cGreen}config                            			 ${cNC}"
		echo "${cCyan}|${cWhite}                                               			                 ${cNC}"
		echo "${cCyan}+---------------------------------------------------------------+${cNC}"
		echo "\n"
}

case "$1" in
	config)
        do_config
        ;;
	check)
        do_error
        do_check
        ;;
	schedule)
		do_schedule
        ;; 
	upgrade)
		do_upgrade
        ;;
	enable)
        do_enable
        ;;
	disable)
        do_disable
        ;;
	hash)
        do_hash
        ;;
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
		do_error
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	status)
		systemctl daemon-reload
		status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
		0|1)
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		*)
			# Failed to stop
			log_end_msg 1
			;;
		esac
		;;
	*)
		do_help

		#echo "Usage: $SCRIPTNAME {start|stop|status|restart|hash|enable|disable}" >&2
		exit 3
		;;
esac

:
